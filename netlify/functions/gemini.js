// netlify/functions/gemini.js
// Opraven√° serverless funkce s fallback logikou

exports.handler = async (event, context) => {
    // CORS headers pro v≈°echny requesty
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Content-Type': 'application/json'
    };

    // Handle preflight requests
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    // Only accept POST
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers,
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    try {
        const { userMessage, state, aiConversationState } = JSON.parse(event.body);
        
        // Get API key from environment
        const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;
        
        if (!apiKey) {
            console.log('API key not found, using intelligent fallback');
            // Return intelligent response without API
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify(generateSmartResponse(userMessage, state))
            };
        }

        // Try Gemini API
        try {
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`;
            
            const systemPrompt = createSystemPrompt(state, aiConversationState);
            const fullPrompt = `${systemPrompt}\n\nU≈æivatel: ${userMessage}\n\nOdpovƒõz jako JSON.`;
            
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{
                        parts: [{ text: fullPrompt }]
                    }],
                    generationConfig: {
                        temperature: 0.7,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 1024,
                    }
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Gemini API error:', errorText);
                throw new Error('API call failed');
            }

            const data = await response.json();
            const aiText = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
            
            // Try to parse as JSON
            try {
                const parsed = JSON.parse(aiText.replace(/```json\n?/g, '').replace(/```\n?/g, ''));
                return {
                    statusCode: 200,
                    headers,
                    body: JSON.stringify(parsed)
                };
            } catch (parseError) {
                // If not JSON, create structured response
                return {
                    statusCode: 200,
                    headers,
                    body: JSON.stringify({
                        responseText: aiText || generateSmartResponse(userMessage, state).responseText,
                        suggestions: getContextualSuggestions(state),
                        performCalculation: shouldPerformCalculation(state),
                        showFreeConsultation: true
                    })
                };
            }
            
        } catch (apiError) {
            console.error('API Error:', apiError);
            // Fallback to intelligent response
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify(generateSmartResponse(userMessage, state))
            };
        }
        
    } catch (error) {
        console.error('Handler error:', error);
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
                responseText: "Omlouv√°m se, nastala chyba. Zkuste pros√≠m pou≈æ√≠t kalkulaƒçku nebo zavolejte na 800 123 456.",
                suggestions: ["Pou≈æ√≠t kalkulaƒçku", "Kontaktovat specialistu", "Zkusit znovu"],
                performCalculation: false,
                showFreeConsultation: true
            })
        };
    }
};

// Helper functions
function createSystemPrompt(state, conversationState) {
    return `Jsi hypoteƒçn√≠ specialista v ƒåesk√© republice. M√°≈° p≈ô√≠stup k nab√≠dk√°m 23 bank.
    
Aktu√°ln√≠ data klienta:
- Z√°mƒõr: ${state.intent || 'neurƒçeno'}
- Cena nemovitosti: ${state.propertyValue || 0} Kƒç
- Vlastn√≠ zdroje: ${state.ownResources || 0} Kƒç
- P≈ô√≠jem: ${state.monthlyIncome || 0} Kƒç/mƒõs√≠c
- Z√°vazky: ${state.monthlyLiabilities || 0} Kƒç/mƒõs√≠c
- Po≈æadovan√° doba: ${state.loanTerm || 25} let
- Fixace: ${state.fixation || 5} let

Aktu√°ln√≠ sazby (leden 2025):
- 3 roky: 4.19% (LTV 80%), 4.69% (LTV 90%)
- 5 let: 3.99% (LTV 80%), 4.49% (LTV 90%)
- 7 let: 4.09% (LTV 80%), 4.59% (LTV 90%)

Odpov√≠dej struƒçnƒõ, p≈ô√≠mo k vƒõci. Pokud m√°≈° v≈°echna data, nastav performCalculation: true.
Odpovƒõz POUZE jako JSON objekt s touto strukturou:
{
    "responseText": "tvoje odpovƒõƒè",
    "suggestions": ["n√°vrh 1", "n√°vrh 2", "n√°vrh 3"],
    "performCalculation": true/false,
    "updateState": null nebo objekt s nov√Ωmi hodnotami,
    "showFreeConsultation": true/false
}`;
}

function generateSmartResponse(userMessage, state) {
    const message = userMessage.toLowerCase();
    
    // Greeting
    if (message.includes('ahoj') || message.includes('dobr√Ω den') || message.includes('zdrav√≠m')) {
        return {
            responseText: "Dobr√Ω den! Jsem v√°≈° hypoteƒçn√≠ poradce s p≈ô√≠stupem k 23 bank√°m. Pomohu v√°m naj√≠t nejlep≈°√≠ hypot√©ku. Co v√°s zaj√≠m√°?",
            suggestions: ["Chci koupit byt", "Aktu√°ln√≠ sazby", "Refinancov√°n√≠"],
            performCalculation: false,
            showFreeConsultation: true
        };
    }
    
    // Interest rates
    if (message.includes('sazb') || message.includes('√∫rok')) {
        return {
            responseText: `Aktu√°ln√≠ √∫rokov√© sazby (leden 2025):
            
üìä **Nejlep≈°√≠ nab√≠dky:**
‚Ä¢ ƒåMSS Li≈°ka: od 3.79% (5 let fixace)
‚Ä¢ Hypoteƒçn√≠ banka: od 3.89% (5 let fixace)  
‚Ä¢ ƒåSOB: od 3.99% (5 let fixace)

Sazby z√°vis√≠ na LTV, bonitƒõ a fixaci. Pro p≈ôesnou nab√≠dku pot≈ôebuji zn√°t va≈°e parametry.`,
            suggestions: ["Spoƒç√≠tat hypot√©ku", "V√≠ce o bank√°ch", "Konzultace zdarma"],
            performCalculation: false,
            showFreeConsultation: true
        };
    }
    
    // Property purchase
    if (message.includes('koupit') || message.includes('byt') || message.includes('d≈Øm')) {
        if (state.propertyValue > 0 && state.ownResources > 0) {
            return {
                responseText: "V√Ωbornƒõ! M√°m v≈°echny √∫daje. P≈ôipravuji pro v√°s nejlep≈°√≠ nab√≠dky z 23 bank:",
                suggestions: ["Zmƒõnit parametry", "Kontaktovat specialistu", "V√≠ce informac√≠"],
                performCalculation: true,
                showFreeConsultation: true
            };
        }
        return {
            responseText: "Pomohu v√°m s koup√≠ nemovitosti. Jak√° je p≈ôibli≈æn√° cena nemovitosti?",
            suggestions: ["3 miliony", "5 milion≈Ø", "8 milion≈Ø"],
            performCalculation: false,
            updateState: { intent: 'koupƒõ' }
        };
    }
    
    // Refinancing
    if (message.includes('refinanc')) {
        return {
            responseText: `Refinancov√°n√≠ m≈Ø≈æe u≈°et≈ôit tis√≠ce mƒõs√≠ƒçnƒõ! 
            
S aktu√°ln√≠mi sazbami od 3.79% m≈Ø≈æete u≈°et≈ôit 3-5 tis√≠c mƒõs√≠ƒçnƒõ.
Bezplatnƒõ provƒõ≈ô√≠me va≈°e mo≈ænosti u v≈°ech 23 bank.`,
            suggestions: ["Spoƒç√≠tat √∫sporu", "Zavolat specialistu", "V√≠ce informac√≠"],
            performCalculation: false,
            updateState: { intent: 'refinancov√°n√≠' },
            showFreeConsultation: true
        };
    }
    
    // Numbers in message - try to parse them
    const numbers = message.match(/\d+/g);
    if (numbers) {
        const num = parseInt(numbers[0]);
        
        if (num > 100000) {
            if (!state.propertyValue) {
                return {
                    responseText: `Cena nemovitosti ${formatNumber(num)} Kƒç. Kolik m√°te vlastn√≠ch zdroj≈Ø?`,
                    suggestions: ["20% z ceny", "1 milion", "2 miliony"],
                    performCalculation: false,
                    updateState: { propertyValue: num }
                };
            } else if (!state.ownResources) {
                return {
                    responseText: `Vlastn√≠ zdroje ${formatNumber(num)} Kƒç. Jak√Ω je v√°≈° ƒçist√Ω mƒõs√≠ƒçn√≠ p≈ô√≠jem?`,
                    suggestions: ["50 tis√≠c", "75 tis√≠c", "100 tis√≠c"],
                    performCalculation: false,
                    updateState: { ownResources: num }
                };
            }
        } else if (num > 10000 && !state.monthlyIncome) {
            return {
                responseText: `P≈ô√≠jem ${formatNumber(num)} Kƒç mƒõs√≠ƒçnƒõ. V√Ωbornƒõ, m√°m v≈°e pro v√Ωpoƒçet!`,
                suggestions: ["Zobrazit nab√≠dky", "Zmƒõnit √∫daje", "Kontakt"],
                performCalculation: true,
                updateState: { monthlyIncome: num }
            };
        }
    }
    
    // Check if we have enough data
    const hasData = state.propertyValue > 0 && state.ownResources > 0 && state.monthlyIncome > 0;
    
    if (hasData) {
        const ltv = ((state.propertyValue - state.ownResources) / state.propertyValue) * 100;
        return {
            responseText: `Skvƒõle! Podle va≈°ich parametr≈Ø (LTV ${ltv.toFixed(1)}%) jsem na≈°el nejlep≈°√≠ nab√≠dky:`,
            suggestions: ["Zmƒõnit parametry", "Kontakt na specialistu", "PDF report"],
            performCalculation: true,
            showFreeConsultation: true
        };
    }
    
    // Progressive data collection
    if (!state.intent) {
        return {
            responseText: "Zaƒçnƒõme t√≠m, co pl√°nujete:",
            suggestions: ["Koupit nemovitost", "Refinancovat", "Stavƒõt d≈Øm"],
            performCalculation: false
        };
    }
    
    if (!state.propertyValue) {
        return {
            responseText: "Jak√° je cena nemovitosti?",
            suggestions: ["3 miliony", "5 milion≈Ø", "8 milion≈Ø"],
            performCalculation: false
        };
    }
    
    if (!state.ownResources) {
        return {
            responseText: "Kolik m√°te vlastn√≠ch prost≈ôedk≈Ø?",
            suggestions: ["20% z ceny", "1 milion", "2 miliony"],
            performCalculation: false
        };
    }
    
    if (!state.monthlyIncome) {
        return {
            responseText: "Jak√Ω je v√°≈° ƒçist√Ω mƒõs√≠ƒçn√≠ p≈ô√≠jem?",
            suggestions: ["50 tis√≠c", "75 tis√≠c", "100 tis√≠c"],
            performCalculation: false
        };
    }
    
    // Default response
    return {
        responseText: "Jak v√°m mohu pomoci s hypot√©kou? Nab√≠z√≠me konzultaci ZDARMA se specialistou.",
        suggestions: ["Spoƒç√≠tat hypot√©ku", "Aktu√°ln√≠ sazby", "Konzultace zdarma"],
        performCalculation: false,
        showFreeConsultation: true
    };
}

function getContextualSuggestions(state) {
    if (!state.intent) return ["Koupit byt", "Refinancovat", "Postavit d≈Øm"];
    if (!state.propertyValue) return ["3 miliony", "5 milion≈Ø", "8 milion≈Ø"];
    if (!state.ownResources) return ["20% z ceny", "1 milion", "2 miliony"];
    if (!state.monthlyIncome) return ["50 tis√≠c", "75 tis√≠c", "100 tis√≠c"];
    return ["Zobrazit v√Ωpoƒçet", "Zmƒõnit √∫daje", "Konzultace zdarma"];
}

function shouldPerformCalculation(state) {
    return state.intent && 
           state.propertyValue > 0 && 
           state.ownResources > 0 && 
           state.monthlyIncome > 0;
}

function formatNumber(num) {
    return new Intl.NumberFormat('cs-CZ').format(num);
}